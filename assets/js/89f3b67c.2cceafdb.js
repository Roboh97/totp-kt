"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9475],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(r),d=o,h=u["".concat(c,".").concat(d)]||u[d]||g[d]||a;return r?n.createElement(h,i(i({ref:t},p),{},{components:r})):n.createElement(h,i({ref:t},p))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9186:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:1},i="Initialize Generator",s={unversionedId:"secretgenerator/secret/initialize-generator",id:"secretgenerator/secret/initialize-generator",title:"Initialize Generator",description:"The secret generator is used to generate secrets in Base32 encoding that can be used with the various OTP (One-Time Password) generators.",source:"@site/docs/secretgenerator/secret/initialize-generator.mdx",sourceDirName:"secretgenerator/secret",slug:"/secretgenerator/secret/initialize-generator",permalink:"/totp-kt/docs/next/secretgenerator/secret/initialize-generator",draft:!1,editUrl:"https://github.com/robinohs/totp-kt/docs/secretgenerator/secret/initialize-generator.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Secret Generator",permalink:"/totp-kt/docs/next/category/secret-generator"},next:{title:"Generate Secrets",permalink:"/totp-kt/docs/next/secretgenerator/secret/generate-secret"}},c={},l=[{value:"Create secret generator",id:"create-secret-generator",level:2},{value:"Spring Boot",id:"spring-boot",level:2},{value:"Customize properties",id:"customize-properties",level:2},{value:"Code length",id:"code-length",level:3}],p={toc:l},u="wrapper";function g(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"initialize-generator"},"Initialize Generator"),(0,o.kt)("p",null,"The secret generator is used to generate secrets in Base32 encoding that can be used with the various OTP (One-Time Password) generators."),(0,o.kt)("h2",{id:"create-secret-generator"},"Create secret generator"),(0,o.kt)("p",null,"You can create an instance of the SecretGenerator in the following way:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val base32Secret: Base32Secret = secretGenerator.generateSecret()\n")),(0,o.kt)("h2",{id:"spring-boot"},"Spring Boot"),(0,o.kt)("p",null,"Instead of creating a new instance of a generator each time a token is checked, it is also possible to create a bean within Spring.\nThis allows to configure the generator once and this configuration is maintained each time the bean is injected into a component."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Bean\nfun secretGenerator(): SecretGenerator {\n    val generator = SecretGenerator()\n    generator.randomGenerator = RandomGenerator(charPool = listOf('B', 'C', 'D'))\n    return generator\n}\n")),(0,o.kt)("p",null,"This bean can then be injected in the constructor of any class marked with @Component (@Service, ...)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Component\nclass CustomComponent(private val secretGenerator: SecretGenerator) {\n    //...\n}\n")),(0,o.kt)("h2",{id:"customize-properties"},"Customize properties"),(0,o.kt)("p",null,"It is possible to customize the properties of the generator, either by setters or applying them in the constructor."),(0,o.kt)("h3",{id:"code-length"},"Code length"),(0,o.kt)("p",null,"The code length specifies how long a generated code will be. If the code length is changed, it is necessary that the user's authenticator app supports this as well."),(0,o.kt)("admonition",{title:"Could break logic",type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Most authenticator apps, such as those from Microsoft or Google, use a length of 6 digits. If you change this number, they are no longer usable.\nHowever, remember that that they are widely used before you drop support for them.")))}g.isMDXComponent=!0}}]);